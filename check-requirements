#!/usr/bin/env bash
# $Id$
# vim:et:ft=sh:sts=2:sw=2
#
# gitflow -- Utility used to automate your Git operations by implementing a custom 
# branching model.
#
# Feel free to contribute to this project at:
#    http://github.com/jtallar/gitflow
#
# Author:
# Copyright 2022 Julian Tallar. All rights reserved.
#
# Original Authors:
# Copyright 2012-2019 Peter van der Does. All rights reserved.
# Copyright 2010 Vincent Driessen. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -------------------------------------------------------------------------------
#

# Script used to try running every required command.
# If any of these fail, exits with 1.
# If everything is ok, exits with 0

get_getopt_cmd() {
    case $(uname -s) in
    FreeBSD|OpenBSD|NetBSD)
        echo "/usr/local/bin/getopt"
        ;;
    Darwin) # MacOS
        echo "$(brew --prefix gnu-getopt)/bin/getopt"
        ;;
    *)
        echo "getopt"
        ;;
    esac
}

#
# $1 status code - Return code to evaluate
# $2 cmd - Command name tested
# 
# Uses $? - return code from previous call
#
check_return_code() {
    local status_code cmd_name

    status_code="$1"
    cmd_name="$2"
    [ -n "$1" ] || status_code=1
    [ -n "$2" ] || cmd_name="..."

    if [ $status_code -ne 0 ]; then
        echo "Command $cmd_name is required and does not exist" >&2
        exit 1
    fi
}

check_requirements() {
	local verbose=0 gnu_req_array status_code

    if [ "$1" = "-v" ] || [ "$1" = "--verbose" ]; then
        verbose=1
    fi

    # Check Bash version
    if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
        echo "You need to be using Bash version >= 4. Please upgrade"
        exit 1
    fi

    # Test redirect to /dev/null
    echo "Nothing" >/dev/null; status_code="$?"
    if [ $status_code -ne 0 ]; then
        echo "Cannot access /dev/null"
        exit 1
    fi

    # Check if GNU enhanced getopt is available
    $(get_getopt_cmd) -T >/dev/null; status_code="$?"
    if [ $status_code -ne 4 ]; then
        echo "Please install GNU enhanced getopt."
        exit 1
    fi

    # gnu_req_array=()
    # gnu_req_array+=("grep") # GNU Grep, will use it to test others...
    # gnu_req_array+=("cat" "rm" "mkdir") # GNU tools for files
    # gnu_req_array+=("uname" "dirname" "realpath" "readlink") # GNU tools for directories
    # gnu_req_array+=("sed" "cut" "tr" "wc" "nano") # GNU String search not grep

    # for cmd in "${gnu_req_array[@]}"; do
    #     if [ $verbose -eq 1 ]; then
    #         echo "$cmd --version | grep 'GNU' >/dev/null"
    #     fi
	# 	$cmd --version | grep 'GNU' >/dev/null
    #     check_return_code "$?" "$cmd"
	# done

    # # Other applications: "awk" "git" "curl" "jq"
    # ## awk - Looking for "awk x.y.z"
    # if [ $verbose -eq 1 ]; then
    #     echo "awk -W version 2>/dev/null | grep 'awk ..*\...*\..' >/dev/null"
    # fi
    # awk -W version 2>/dev/null | grep 'awk ..*\...*\..' >/dev/null
    # check_return_code "$?" "awk"

    # ## git - Looking for "git version x.y.z"
    # if [ $verbose -eq 1 ]; then
    #     echo "git --version | grep 'git version ..*\...*\..' >/dev/null"
    # fi
    # git --version | grep 'git version ..*\...*\..' >/dev/null
    # check_return_code "$?" "git"

    # ## curl - Looking for "curl x.y.z"
    # if [ $verbose -eq 1 ]; then
    #     echo "curl --version | grep 'curl ..*\...*\..' >/dev/null"
    # fi
    # curl --version | grep 'curl ..*\...*\..' >/dev/null
    # check_return_code "$?" "curl"

    ## jq - Looking for "jq-1.6 or higher"
    if [ $verbose -eq 1 ]; then
        echo "jq --version | grep '\(jq-1\.\([6-9]\|[1-9][0-9]\)\)\|\(jq-[2-9]\..\)' >/dev/null"
    fi
    jq --version | grep '\(jq-1\.\([6-9]\|[1-9][0-9]\)\)\|\(jq-[2-9]\..\)' >/dev/null
    check_return_code "$?" "jq"

    echo
    echo "All required commands/programs are installed!"
    return 0
}
check_requirements "$@"
