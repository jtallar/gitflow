#!/usr/bin/env bash
# $Id$
# vim:et:ft=sh:sts=2:sw=2
#
# Some of the contents of this file are taken from 
#	http://github.com/petervanderdoes/gitflow
# Copyright notice below
#
# -------------------------------------------------------------------------------
# gitflow -- Utility used to automate your Git operations by implementing a custom 
# branching model.
#
# Feel free to contribute to this project at:
#    http://github.com/jtallar/gitflow
#
# Author:
# Copyright 2022 Julian Tallar. All rights reserved.
#
# Original Authors:
# Copyright 2012-2019 Peter van der Does. All rights reserved.
# Copyright 2010 Vincent Driessen. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -------------------------------------------------------------------------------
#

#
# Common functionality
#

# Shell output
warn() { echo "$@" >&2; }
die() { warn "Fatal: $@"; exit 1; }
die_help() { warn $@; flags_help; exit 1; }

escape() {
	echo "$1" | sed 's/\([\.\$\*]\)/\\\1/g'
}

#
# String contains function
# $1 haystack
# $2 Needle
#
contains() {
	local return

	case $1 in
		*$2*)
			return=$FLAGS_TRUE
			;;
		*)
			return=$FLAGS_FALSE
			;;
	esac
	return $return
}

# Basic math
min() { [ "$1" -le "$2" ] && echo "$1" || echo "$2"; }
max() { [ "$1" -ge "$2" ] && echo "$1" || echo "$2"; }

# Basic string matching
startswith() { [ "$1" != "${1#$2}" ]; }
endswith() { [ "$1" != "${1%$2}" ]; }

is_true() { [ "$1" = "true" ]; }

# Convenience functions for checking shFlags flags
flag() { local FLAG; eval FLAG='$FLAGS_'$1; [ $FLAG -eq $FLAGS_TRUE ]; }
noflag() { local FLAG; eval FLAG='$FLAGS_'$1; [ $FLAG -ne $FLAGS_TRUE ]; }

# check_boolean
# Check if given value can be interpreted as a boolean
#
# This function determines if the passed parameter is a valid boolean value.
#
# Param $1: string Value to check if it's a valid boolean
#
# Return: string FLAGS_TRUE|FLAGS_FALSE|FLAGS_ERROR
#	FLAGS_TRUE if the parameter is a boolean TRUE
#	FLAGS_FALSE if the parameter is a boolean FALSE
#	FLAGS_ERROR if the parameter is not a boolean
#
check_boolean() {
	local _return _value
	_value="${1}"
	case "${_value}" in
	${FLAGS_TRUE} | [yY] | [yY][eE][sS] | [tT] | [tT][rR][uU][eE])
		_return=${FLAGS_TRUE}
		;;
	${FLAGS_FALSE} | [nN] | [nN][oO] | [fF] | [fF][aA][lL][sS][eE])
		_return=${FLAGS_FALSE}
		;;

	*)
		_return=${FLAGS_ERROR}
		;;
	esac
	unset _value
	return ${_return}
}

#
# Git specific common functionality
#

git_local_branches() { git for-each-ref --sort refname --format='%(refname:short)' refs/heads; }
git_remote_branches() { git for-each-ref --sort refname --format='%(refname:short)' refs/remotes; }
git_all_branches() { git for-each-ref --sort refname --format='%(refname:short)' refs/remotes refs/heads; }
git_all_tags() { git for-each-ref --format='%(refname:short)' refs/tags; }

git_local_branches_prefixed() {
	[ -z $1 ] && die "Prefix parameter missing." # This should never happen.
	git for-each-ref --format='%(refname:short)' refs/heads/$1\* ;
}

git_current_branch() {
	local branch_name

	branch_name="$(git symbolic-ref --quiet HEAD)"
	[ -z $branch_name ] && branch_name="(unnamed branch)" || branch_name="$(git for-each-ref --format='%(refname:short)' $branch_name)"
	echo "$branch_name"
}

git_is_clean_working_tree() {
	git rev-parse --verify HEAD >/dev/null || exit 1
	git update-index -q --ignore-submodules --refresh

	# Check for unstaged changes
	git diff-files --quiet --ignore-submodules || return 1

	# Check for Uncommited changes
	git diff-index --cached --quiet --ignore-submodules HEAD -- || return 2

	# Check for Merge in progress. 
	# Don't know why sometimes there are no uncommited changes and all conflicts are fixed. 
	# But you are still merging, so this would be needed.
	# Won't change it because it could be breaking more than it solves
	# git merge HEAD &> /dev/null || return 3

	return 0
}

git_repo_is_headless() {
	! git rev-parse --quiet --verify HEAD >/dev/null 2>&1
}

git_local_branch_exists() {
	[ -n "$1" ] || die "Missing branch name"
	[ -n "$(git for-each-ref --format='%(refname:short)' refs/heads/$1)" ]
}

# $1 branch - Branch name to delete
#
# Uses flag force
#
git_local_branch_delete() {
	[ -n "$1" ] || die "Missing branch name"

	if flag force; then
		git_do branch -D "$1" || die "Could not delete the $1."
	else
		git_do branch -d "$1" || die "Could not delete the $1."
	fi
}

# $1 branch - Branch name to delete
git_local_branch_delete_if_exists() {
	[ -n "$1" ] || die "Missing branch name"
	
	if ! git_local_branch_exists "$1"; then
		warn "Branch $1 does not exist, continuing..."
		return 0
	fi

	git_local_branch_delete "$1"
}

git_remote_branch_exists() {
	[ -n "$1" ] || die "Missing branch name"
	[ -n "$(git for-each-ref --format='%(refname:short)' refs/remotes/$1)" ]
}

git_remote_branch_delete() {
	[ -n "$1" ] || die "Missing branch name"
	
	git_do push "$ORIGIN" :"$1" || die "Could not delete the remote $1 in $ORIGIN."

	# Update remote references after branch deletion
	git_do remote update --prune
	return 0
}

git_remote_branch_delete_if_exists() {
	[ -n "$1" ] || die "Missing branch name"
	if git_remote_branch_exists "origin/$1"; then
		git_remote_branch_delete "$1"
	else
		warn "Trying to delete the remote branch $1, but it does not exists in $ORIGIN"
		return 1
	fi

	return 0
}

git_branch_exists() {
	[ -n "$1" ] || die "Missing branch name"
	git_local_branch_exists "$1" || git_remote_branch_exists "origin/$1"
}

git_tag_exists() {
	[ -n "$1" ] || die "Missing tag name"
	[ -n "$(git for-each-ref --format='%(refname:short)' refs/tags/$1)" ]
}

git_config_bool_exists() {
	local value

	[ -n "$1" ] || die "Missing config option"
	value=$(git config --get --bool $1)
	[ "$value" = "true" ]
}
#
# git_compare_refs()
#
# Tests whether two references have diverged and need merging
# first. It returns error codes to provide more detail, like so:
#
# 0    References point to the same commit
# 1    First given reference needs fast-forwarding
# 2    Second given reference needs fast-forwarding
# 3    References need a real merge
# 4    There is no merge base, i.e. the references have no common ancestors
#
git_compare_refs() {
	local commit1 commit2 base

	commit1=$(git rev-parse "$1"^{})
	commit2=$(git rev-parse "$2"^{})
	if [ "$commit1" != "$commit2" ]; then
		base=$(git merge-base "$commit1" "$commit2")
		if [ $? -ne 0 ]; then
			return 4
		elif [ "$commit1" = "$base" ]; then
			return 1
		elif [ "$commit2" = "$base" ]; then
			return 2
		else
			return 3
		fi
	else
		return 0
	fi
}

#
# git_is_branch_merged_into()
#
# Checks whether branch $1 is successfully merged into $2
#
git_is_branch_merged_into() {
	local merge_hash base_hash

	merge_hash=$(git merge-base "$1"^{} "$2"^{})
	base_hash=$(git rev-parse "$1"^{})

	# If the hashes are equal, the branches are merged.
	[ "$merge_hash" = "$base_hash" ]
}

#
# git_is_ancestor()
#
# This is the same function as git_is_branch_merged_into but
# for readability given a different name.
#
git_is_ancestor() {
	git_is_branch_merged_into "$1" "$2"
}

#
# git_fetch_branch()
#
# $1 Origin - Where to fetch from
# $2 Branch - Which branch to fetch
#
# This fetches the given branch from the given origin.
# Instead of storing it in FETCH_HEAD it will be stored in
# refs/remotes/<origin>/<branch>
#
git_fetch_branch() {
	local origin branch

	[ -n "$1" ] || die "Missing origin"
	[ -n "$2" ] || die "Missing branch name"
	origin="$1"
	branch="$2"
	if git_remote_branch_exists "origin/$branch"; then
		git_do fetch -q "origin" "$branch" || die "Could not fetch $branch from $origin."
	else
		warn "Trying to fetch branch '$origin/$branch' but it does not exist."
	fi
}

#
# gitflow specific common functionality
#

# Function used to check if the repository is git-flow enabled.
gitflow_has_master_configured() {
	local master

	master=$(git config --get gitflow.branch.master)
	[ "$master" != "" ] && git_local_branch_exists "$master"
}

#
# gitflow_has_branch_configured()
#
# $1 Branch - What branch to check if conigured
#
# This checks if the defined branch is already configured
#
gitflow_has_branch_configured() {
	local branch branch_name

	[ -n "$1" ] || die "Missing branch"
	branch_name="$1"

	branch=$(git config --get "gitflow.branch.${branch_name}")
	[ "$branch" != "" ] && git_local_branch_exists "$branch"
}

gitflow_is_initialized() {
	# Using BASE_BRANCHES from config
	if [ -z "$BASE_BRANCHES" ]; then
		die "'BASE_BRANCHES' must be defined!"
	fi

	local branch_name all_bases
	all_bases=$(jq -c '.[]' <<< "$BASE_BRANCHES")
	for base_i in $all_bases; do
		branch_name=$(trim_line_quotes $base_i)
		git_local_branch_exists "$branch_name"
	done
}

gitflow_get_remote_default_branch() {
	git remote show origin | sed -n '/HEAD branch/s/.*: //p'
}

# Loading settings that can be overridden using git config
gitflow_load_settings() {
	local AUX_VARIABLE

	export GIT_CURRENT_REPO_DIR="$(git rev-parse --show-toplevel 2>/dev/null)"
	DOT_GIT_DIR=$(git rev-parse --git-dir)
	export DOT_GIT_DIR="$(cd ${DOT_GIT_DIR} >/dev/null 2>&1 && pwd)"
	export HOOKS_DIR="$(git config --get gitflow.path.hooks || echo ${DOT_GIT_DIR}/hooks)" # the second option is used to support previous versions of git-flow
	export ORIGIN=$(git config --get remote.origin.url)
	AUX_VARIABLE=$(awk -F '(git@github.com:)|(https://github.com/)' '{print $2}' <<< "$ORIGIN")
	# Neither usernames nor repositories can have /
	export GIT_USERNAME=$(cut -d'/' -f1 <<< "$AUX_VARIABLE")
	export GIT_REPOSITORY=$(cut -d'/' -f2- <<< "${AUX_VARIABLE%.git}")

	# Create auxiliary directory for temporary files if not exists
	mkdir -p "$DOT_GIT_DIR/.gitflow"
}

#
# gitflow_resolve_nameprefix
#
# Inputs:
# $1 = name prefix to resolve
# $2 = branch prefix to use
#
# Searches branch names from git_local_branches() to look for a unique
# branch name whose name starts with the given name prefix.
#
# There are multiple exit codes possible:
# 0: The unambiguous full name of the branch is written to stdout
#    (success)
# 1: No match is found.
# 2: Multiple matches found. These matches are written to stderr
#
gitflow_resolve_nameprefix() {
	local name prefix
	local match matches num_matches

	name=$1
	prefix=$2

	# first, check if there is a perfect match
	if git_local_branch_exists "$prefix$name"; then
		echo "$name"
		return 0
	fi

	matches=$(echo "$(git_local_branches)" | grep "^$(escape "$prefix$name")")
	num_matches=$(echo "$matches" | wc -l)
	if [ -z "$matches" ]; then
		# no prefix match, so take it literally
		warn "No branches match '$prefix$name*'"
		return 1
	else
		if [ $num_matches -eq 1 ]; then
			echo "${matches#$prefix}"
			return 0
		else
			# multiple matches, cannot decide
			warn "Multiple branches match prefix '$name':"
			for match in $matches; do
				warn "- $match"
			done
			return 2
		fi
	fi
}

#
# Check if the given branch is a git-flow branch
#
gitflow_is_prefixed_branch() {
	local branch return

	branch=$1
	case $branch in
	$(git config --get gitflow.prefix.feature)* | \
	$(git config --get gitflow.prefix.bugfix)* | \
	$(git config --get gitflow.prefix.release)* | \
	$(git config --get gitflow.prefix.hotfix)*  | \
	$(git config --get gitflow.prefix.support)* )
		return=0
		;;
	*)
		return=1
		;;
	esac
	return $return
}
#
# Update the config with the base of a new git-flow branch.
#
# @param $1 Base of the new branch
# @param $2 Name of the branch
#
gitflow_config_set_base_branch() {
	local base branch

	base=$1
	branch=$2
	$(git_do config --local "gitflow.branch.$branch.base" $base)
}

#
# Get the base of a branch as set by gitflow_set_branch
#
# @param $1 Name of the branch
# @return string|empty String when a base is found otherwise empty
#
gitflow_config_get_base_branch() {
	local branch

	branch=$1
	echo $(git config --local --get "gitflow.branch.$branch.base")
}

#
# Remove the section that contains the base of a branch as set by gitflow_set_branch
#
# @param $1 Name of the branch
#
gitflow_config_remove_base_section() {
	local branch

	branch=$1
	$(git_do config --local --remove-section "gitflow.branch.$branch" 2>/dev/null)
}

#
# Remove the base of the git-flow branch from the.
# @param $1 Name of the branch
#
gitflow_config_remove_base_branch() {
	local base

	base=$1
	$(git_do config --local --unset "gitflow.branch.$branch.base" 2>/dev/null)
}

#
# Remove the base of the git-flow branch from the.
# @param $1 Name of the branch
#
gitflow_config_rename_sections() {
	local new
	local old

	old=$1
	new=$2
	$(git_do config --local --rename-section "gitflow.branch.$old" "gitflow.branch.$new" 2>/dev/null)
}

# gitflow_override_flag_boolean()
#
# Override a boolean flag
#
# Param $1: string The name of the config variable e.g. "feature.start.fetch"
# Param $2: string The flag name
#
gitflow_override_flag_boolean() {
	local _variable

	_variable=$(git config --bool --get gitflow.$1 2>&1)
	case $? in
	0)
		[ "${_variable}" = "true" ] && eval "FLAGS_${2}=${FLAGS_TRUE}" || eval "FLAGS_${2}=${FLAGS_FALSE}"
		;;
	128)
		die "${_variable}"
		;;
	esac
	unset _variable
	return ${FLAGS_TRUE}
}

# gitflow_override_flag_string()
#
# Override a string flag
#
# Param $1: string The name of the config variable e.g. "feature.start.fetch"
# Param $2: string The flag name
#
gitflow_override_flag_string() {
	local _variable

	_variable=$(git config --get gitflow.$1 2>&1)
	case $? in
	0)
		eval "FLAGS_${2}=\"${_variable}\""
		;;
	esac
	unset _variable
	return ${FLAGS_TRUE}
}

# gitflow_create_squash_message()
#
# Create the squash message, overriding the one generated by git itself
#
# Param $1: string The line to be added
# Param $2: string The base of the branch that will me merged
# Param $3: string The branch that will be merged.
#
gitflow_create_squash_message() {
	echo Squashed commit of the following:
	echo
	echo $1
	echo
	git log --no-merges --pretty=medium ^"$2" $3
}

#
# Parameter functions
#
gitflow_require_name_arg() {
	if [ "$NAME" = "" ]; then
		die_help "Missing argument <name>"
	fi
}

gitflow_expand_nameprefix_arg() {
	local expanded_name exitcode

	gitflow_require_name_arg

	expanded_name=$(gitflow_resolve_nameprefix "$NAME" "$PREFIX")
	exitcode=$?
	case $exitcode in
	0)
		NAME=$expanded_name
		BRANCH=$PREFIX$NAME
		;;
	*)
		exit 1
		;;
	esac
}

gitflow_require_version_arg() {
	if [ "$VERSION" = "" ]; then
		die_help "Missing argument <version>"
	fi
}

gitflow_expand_versionprefix_arg() {
	local expanded_version exitcode

	gitflow_require_version_arg

	version=$(gitflow_resolve_nameprefix "$VERSION" "$PREFIX")
	exitcode=$?
	case $exitcode in
	0)
		VERSION=$version
		BRANCH=$PREFIX$VERSION
		;;
	*)
		exit 1
		;;
	esac
}


gitflow_require_base_arg() {
	if [ "$BASE" = "" ]; then
		die_help "Missing argument <base>"
	fi
}

#
# Set branch name variables
# 
# $1 branch_name - Branch to merge into other branch
#
gitflow_set_name() {
	local branch_name

	branch_name="$1"
	[ -n "$1" ] || die "Missing branch name"

	BRANCH="$branch_name"
	NAME=${BRANCH}
}

gitflow_set_name_as_current_branch() {
	gitflow_set_name $(git_current_branch)
}

gitflow_use_current_branch_name() {
	local current_branch

	current_branch=$(git_current_branch)

	if startswith "$current_branch" "$HU_PREFIX"; then
		BRANCH=$current_branch
		NAME=${BRANCH}
	else
		warn "The current HEAD is no ${SUBCOMMAND} branch."
		warn "Please specify a <name> argument."
		exit 1
	fi
}

gitflow_use_current_branch_name_from_aux() {
	local current_branch root_branch
	local all_steps branch_prefixes aux_branch aux_branch_prefix

	current_branch=$(git_current_branch)

	branch_prefixes=()
	all_steps=$(jq -c '.[]' <<< "$FINISH_STEPS")
	for step in $all_steps; do
		aux_branch=$(json_get_key "$step" '."aux-branch"')
		aux_branch_prefix=$(trim_line_quotes $(json_get_key "$step" '."aux-branch-prefix"'))

		if is_true "$aux_branch" && [ "$aux_branch_prefix" ] && [ ! "$aux_branch_prefix" = "null" ]; then
			branch_prefixes+=("$aux_branch_prefix")
		fi
	done

	if startswith "$current_branch" "$HU_PREFIX"; then
		BRANCH=$current_branch
		NAME=${BRANCH}
		return 0
	else
		for prefix in "${branch_prefixes[@]}"; do
			if startswith "$branch_name" "$prefix"; then
				root_branch=$(awk -F "$prefix" '{print $2}' <<< "$branch_name")
				if startswith "$root_branch" "$HU_PREFIX"; then
					BRANCH=$root_branch
					NAME=${BRANCH}
					return 0
				fi
			fi
		done
	fi

	warn "The current HEAD is no ${SUBCOMMAND} branch."
	warn "Please specify a <name> argument."
	exit 1
}

#
# Returns 0 if feature branch, 1 if aux branch
#
require_feature_name_or_aux() {
	local branch_name root_branch 
	local all_steps branch_prefixes aux_branch aux_branch_prefix

	branch_name="$1"
	[ -n "$1" ] || branch_name="$NAME"

	branch_prefixes=()
	all_steps=$(jq -c '.[]' <<< "$FINISH_STEPS")
	for step in $all_steps; do
		aux_branch=$(json_get_key "$step" '."aux-branch"')
		aux_branch_prefix=$(trim_line_quotes $(json_get_key "$step" '."aux-branch-prefix"'))

		if is_true "$aux_branch" && [ "$aux_branch_prefix" ] && [ ! "$aux_branch_prefix" = "null" ]; then
			branch_prefixes+=("$aux_branch_prefix")
		fi
	done

	if startswith "$branch_name" "$HU_PREFIX"; then
		BRANCH=$branch_name
		NAME=${BRANCH}
		return 0
	else
		for prefix in "${branch_prefixes[@]}"; do
			if startswith "$branch_name" "$prefix"; then
				root_branch=$(awk -F "$prefix" '{print $2}' <<< "$branch_name")
				if startswith "$root_branch" "$HU_PREFIX"; then
					BRANCH=$root_branch
					NAME=${BRANCH}
					return 1
				fi
			fi
		done
	fi

	warn "The current HEAD is no ${SUBCOMMAND} branch."
	warn "Please specify a <name> argument."
	exit 1
}

require_feature_name() {
	local branch_name

	branch_name="$1"
	[ -n "$1" ] || branch_name="$NAME"

	startswith "$branch_name" "$HU_PREFIX" || die "$NAME is not a Feature name. Feature names must start with $HU_PREFIX."
}

gitflow_use_current_branch_version() {
	local current_branch

	current_branch=$(git_current_branch)

	if startswith "$current_branch" "$PREFIX"; then
		BRANCH=$current_branch
		VERSION=${BRANCH#$PREFIX}
	else
		warn "The current HEAD is no ${SUBCOMMAND} branch."
		warn "Please specify a <version> argument."
		exit 1
	fi
}

gitflow_rename_branch() {
	# Parse arguments
	FLAGS "$@" || exit $?
	eval set -- "${FLAGS_ARGV}"

	# read arguments into global variables
	if [ -z $1 ]; then
		NEW_NAME=''
	else
		NEW_NAME=$1
	fi

	if [ -z $2 ]; then
		NAME=''
	else
		NAME=$2
	fi
	BRANCH=${PREFIX}${NAME}
	NEW_BRANCH=${PREFIX}${NEW_NAME}

	if [ -z "$NEW_NAME" ]; then
		die "No new name given."
	fi

	require_feature_name "$NEW_NAME"

	# Use current branch if no name is given
	if [ "$NAME" = "" ]; then
		gitflow_use_current_branch_name
	fi


	# Sanity checks
	require_branch "$BRANCH"
	require_branch_absent "$NEW_BRANCH"

	git_do branch -m "$BRANCH" "$NEW_BRANCH" || die "Error renaming branch '$BRANCH' to '$NEW_BRANCH'"
	gitflow_config_rename_sections "$BRANCH" "$NEW_BRANCH"

	echo
	echo "Summary of actions:"
	echo "- Branch '$BRANCH' has been renamed to '$NEW_BRANCH'."
	echo "- You are now on branch '$(git_current_branch)'"
	echo
}
#
# Assertions for use in git-flow subcommands
#

require_git_repo() {
	git rev-parse 2>/dev/null || die "Not a git repository"
}

require_gitflow_initialized() {
	gitflow_is_initialized || die "Not a gitflow-enabled repo yet. As init is not done yet, please create all base branches."
}

require_clean_working_tree() {
	local result

	git_is_clean_working_tree
	result=$?
	if [ $result -eq 1 ]; then
		die "Working tree contains unstaged changes. Aborting."
	fi
	if [ $result -eq 2 ]; then
		die "Index contains uncommited changes. Aborting."
	fi
}

require_base_is_local_branch() {
	git_local_branch_exists "$1" || die "Base '$1' needs to be a branch. It does not exist and is required."
}

require_local_branch() {
	git_local_branch_exists "$1" || die "Local branch '$1' does not exist and is required."
}

require_remote_branch() {
	git_remote_branch_exists "$1" || die "Remote branch '$1' does not exist and is required."
}

require_branch() {
	git_branch_exists "$1" || die "Branch '$1' does not exist and is required."
}

require_branch_absent() {
	git_branch_exists "$1" && die "Branch '$1' already exists (local or remote). Pick another name."
}

require_local_branch_absent() {
	git_local_branch_exists "$1" && die "Branch '$1' already exists. Pick another name."
}

require_tag_absent() {
	git_tag_exists "$1" && die "Tag '$1' already exists. Pick another name."
}

# Same as require_branches_equal, but does not die and returns
check_branches_equal() {
	local compare_refs_result

	require_local_branch "$1"
	require_remote_branch "$2"
	git_compare_refs "$1" "$2"
	compare_refs_result=$?

	if [ $compare_refs_result -gt 0 ]; then
		warn "Branches '$1' and '$2' have diverged."
		if [ $compare_refs_result -eq 1 ]; then
			warn "And branch '$1' may be fast-forwarded."
		elif [ $compare_refs_result -eq 2 ]; then
			# Warn here, since there is no harm in being ahead
			warn "And local branch '$1' is ahead of '$2'."
		else
			warn "Branches need merging first."
		fi
	fi

	return $compare_refs_result
}

require_branch_equal_origin_or_push() {
	local branch_name origin_branch

	branch_name="$1"
	origin_branch="origin/$branch_name"

	check_branches_equal "$branch_name" "$origin_branch"
	result=$?

	if [ $result -gt 0 ]; then
		if [ $result -eq 2 ]; then
			echo "Pushing $branch_name to origin..."
			git_do push "$ORIGIN" "$branch_name:$branch_name" || die "Could not push branch '$branch_name' to remote '$ORIGIN'."
		else
			die "Cannot procede with these differences. Fix them and re-run."
		fi
	fi
}

require_branches_equal_or_pull() {
	local local_branch origin_branch

	local_branch="$1"
	origin_branch="$2"

	check_branches_equal "$local_branch" "$origin_branch"
	result=$?
	
	if [ $result -gt 0 ]; then
		if [ $result -eq 1 ]; then
			current_branch=$(git_current_branch)
			git_do checkout "$local_branch" || die "Could not check out branch '$local_branch'."
			echo "Pulling $local_branch from origin..."
			git_do pull "$ORIGIN" "$local_branch" || die "Could not pull branch '$local_branch' from remote '$ORIGIN'."
			git_do checkout "$current_branch" || die "Could not check out branch '$current_branch'."
		else
			die "Cannot procede with these differences. Fix them and re-run."
		fi
	fi
}

require_branches_equal() {
	local compare_refs_result

	require_local_branch "$1"
	require_remote_branch "$2"
	git_compare_refs "$1" "$2"
	compare_refs_result=$?

	if [ $compare_refs_result -gt 0 ]; then
		warn "Branches '$1' and '$2' have diverged."
		if [ $compare_refs_result -eq 1 ]; then
			die "And branch '$1' may be fast-forwarded."
		elif [ $compare_refs_result -eq 2 ]; then
			# Warn here, since there is no harm in being ahead
			warn "And local branch '$1' is ahead of '$2'."
		else
			die "Branches need merging first."
		fi
	fi
}

#
# Merge specified branch into current branch
# 
# $1 branch - Branch to merge into other branch
# $2 base - Recipient branch of merge
# $3 step - Step number if merge conflict (defaults to 0)
# $4 stage - Stage number if merge conflict (defaults to 0)
# $5 print_arr - Array of prints up to here (defaults to [])
#
# Uses flags squash, no_ff
#
# Exits with error if merge conflict
#
gitflow_merge_branch_to_base() {
	local branch base step_num stage_num print_arr feature_name
	branch="$1"
	base="$2"

	step_num="$3"
	[ -n "$3" ] || step_num="0"
	stage_num="$4"
	[ -n "$4" ] || stage_num="0"
	print_arr=("${@:5}")

	feature_name="$NAME"

	require_local_branch "$branch"
	require_local_branch "$base"

	git_do checkout "$base" || die "Could not check out branch '$base'."

	if noflag squash; then
		if flag no_ff; then
			git_do merge --no-ff "$branch"
		else
			if [ "$(git rev-list -n2 "$base..$branch" | wc -l)" -eq 1 ]; then
				git_do merge --ff "$branch"
			else
				git_do merge --no-ff "$branch"
			fi
		fi
	else
		git_do merge --squash "$branch"
		flag squash_info && gitflow_create_squash_message "Merged feature branch '$branch'" "$base" "$branch" > "$DOT_GIT_DIR/SQUASH_MSG_$base"
		git_do commit
	fi

	if [ $? -ne 0 ]; then
		# Oops.. we have a merge conflict!
		# Write the given $branch and $base to a temporary file as we will
		# be needing it later.
		echo "$branch\\$base\\$step_num\\$stage_num\\$CONFIG_SHA_SUM" > "$DOT_GIT_DIR/.gitflow/MERGE_BASE_$feature_name"
		echo
		echo "Summary of completed actions:"
		for msg in "${print_arr[@]}"; do
			echo $msg
		done
		echo "###############################################################################"
		echo
		echo "There were merge conflicts when merging $branch to $base."
		echo "To resolve the merge conflict manually, use:"
		echo "    git mergetool"
		echo "Or just go to your project in an IDE and it will prompt you to solve conflicts."
		echo "Then, commit your merge. You can do this by running"
		echo "    git commit"
		echo
		echo "You can then complete the finish by running it again:"
		echo "    $EXECUTED_CMD"
		echo
		echo "Alternatively, you can cancel your merge by running"
		echo "    git merge --abort"
		echo
		exit 1
	fi
}

# 
# Create branch from base
# 
# $1 branch - New branch name
# $2 base - Base branch for new branch. Defaults to current branch
#
gitflow_create_branch() {
	local branch base
	branch="$1"
	base="$2"
	[ -n "$2" ] || base=$(git_current_branch)

	require_local_branch_absent "$branch"
	if ! git_local_branch_exists "$base" && ! git_remote_branch_exists "$base"; then
		die "Branch $base does not exist neither locally or remotely."
	fi

	git_do checkout -b "$branch" "$base" || die "Could not create branch '$branch' from '$base'."
}

# Parse configuration file at $CONFIG_FILENAME
gitflow_parse_config() {
	if [ -z "$CONFIG_FILENAME" ]; then
		die "'CONFIG_FILENAME' must be defined!"
	fi
	
	local json_file
	json_file=$(cat "$CONFIG_FILENAME")

	export BASE_BRANCHES=$(json_get_key "$json_file" '."base-branches"')
	if [ -z "$BASE_BRANCHES" ] || [ "$BASE_BRANCHES" = "null" ]; then
		die "'BASE_BRANCHES' is missing in $CONFIG_FILENAME!"
	fi

	export FEATURE_BASE=$(trim_line_quotes $(json_get_key "$json_file" '."feature-base"'))
	if [ -z "$FEATURE_BASE" ] || [ "$FEATURE_BASE" = "null" ]; then
		die "'FEATURE_BASE' is missing in $CONFIG_FILENAME!"
	fi
	require_branch_in_base_branches "$FEATURE_BASE"

	export DEFAULT_CONFIG=$(json_get_key "$json_file" '."default-config"')
	if [ -z "$DEFAULT_CONFIG" ] || [ "$DEFAULT_CONFIG" = "null" ]; then
		die "'DEFAULT_CONFIG' is missing in $CONFIG_FILENAME!"
	fi

	export FINISH_STEPS=$(json_get_key "$json_file" '."finish-steps"')
	if [ -z "$FINISH_STEPS" ] || [ "$FINISH_STEPS" = "null" ]; then
		die "'FINISH_STEPS' is missing in $CONFIG_FILENAME!"
	fi

	export CONFIG_SHA_SUM=$(shasum -a 256 "$CONFIG_FILENAME")
}

# $1 base - Branch to require if in BASE_BRANCHES
require_branch_in_base_branches() {
	# Using BASE_BRANCHES from config
	if [ -z "$BASE_BRANCHES" ]; then
		die "'BASE_BRANCHES' must be defined!"
	fi

	local base branch_name all_bases
	base="$1"
	[ -n "$1" ] || die "Missing base branch name"

	all_bases=$(jq -c '.[]' <<< "$BASE_BRANCHES")
	for base_i in $all_bases; do
		branch_name=$(trim_line_quotes $base_i)
		if [ "$base" = "$branch_name" ]; then
			return 0
		fi
	done

	die "$base is not one of the defined BASE_BRANCHES"
}

#
# Show commands if flag is set.
#
git_do() {
	if flag showcommands; then
		echo "git $@" >&2
	fi

	git $(trim_whitespace "$*")
}

############################################################

export ACCEPT_HEADER='Accept:application/vnd.github.v3+json'
export AUTHORIZATION_HEADER='Authorization:token '"$GITHUB_PAT"''
export GITHUB_API_BASE_URL='https://api.github.com'

# API Reference: https://docs.github.com/en/rest/reference/pulls#list-pull-requests 
#
# Perform a get request to the GitHub API at the desired path
#
# $1 path - path to which the GET request will be done
#			Eg: /repos/
#
# Returns the request response
#
github_api_get() {
	[ -n "$1" ] || die "Missing path"
	curl -X GET -H "$ACCEPT_HEADER" -H "$AUTHORIZATION_HEADER" "$GITHUB_API_BASE_URL$1" -s
}

# 
# Perform a post request to the GitHub API at the desired path
#
# $1 path - path to which the POST request will be done
#			Eg: /repos/
# $2 body - POST body object (optional)
#
# Returns the request response
#
github_api_post() {
	[ -n "$1" ] || die "Missing path"
	curl -X POST -H "$ACCEPT_HEADER" -H "$AUTHORIZATION_HEADER" "$GITHUB_API_BASE_URL$1" -d "$2" -s
}

# 
# Perform a head request to the GitHub API at the desired path
#
# $1 path - path to which the POST request will be done
#			Eg: /repos/
#
# Returns the request response (headers)
#
github_api_head() {
	[ -n "$1" ] || die "Missing path"
	curl -I -H "$ACCEPT_HEADER" -H "$AUTHORIZATION_HEADER" "$GITHUB_API_BASE_URL$1" -s
}

#
#
#
github_check_authenticated() {
	local http_status
	http_status=$(curl -I --write-out '%{http_code}' -H "$ACCEPT_HEADER" -H "$AUTHORIZATION_HEADER" "$GITHUB_API_BASE_URL/repos/$GIT_USERNAME/$GIT_REPOSITORY/pulls" -s -o /dev/null)

	if [ $http_status -eq 200 ]; then
		return 0
	else
		return 1
	fi
}

#
# List all Pull Requests from Repository at GitHub
#
github_list_all_pr() {
	github_api_get "/repos/$GIT_USERNAME/$GIT_REPOSITORY/pulls?state=open&per_page=100"
}

#
# Create a new Pull Request at GitHub Repository
#
# $1 head 	- Head branch to merge from
# $2 base 	- Base branch to merge to
# $3 labels - Labels for the PR (optional)
# $4 title 	- Title of the PR (optional)
# $5 body 	- Body of the PR (optional)
#
# Title will be set to head
#
# Prints resulting issue_number to STDOUT if OK
# Returns 0 if OK, 1 if error, 2 if unauthorized
#
github_create_pr() {
	local head base labels title body response issue_number req_body

	head="$1"
	base="$2"
	labels="$3"
	title="$4"
	body="$5"
	
	[ -n "$1" ] || die "Missing head"
	[ -n "$2" ] || die "Missing base"
	[ -n "$3" ] || labels="[]"
	[ -n "$4" ] || title="$head"
	[ -n "$5" ] || body=""

	body=$(string_to_json "$body") # Already includes starting and ending " "

	req_body="{\"title\":\"$title\",\"base\":\"$base\", \"head\":\"$GIT_USERNAME:$head\", \"body\":$body}"
	response=$(github_api_post "/repos/$GIT_USERNAME/$GIT_REPOSITORY/pulls" "$req_body")

	# Adding label to PR
	issue_number=$(json_get_key "$response" '."number"')

	if [ -z "$issue_number" ] || [ "$issue_number" = "null" ]; then
		return 1
	fi

	# Add labels to PR
	label_body=$(get_labels_body "$labels")
	github_api_post "/repos/$GIT_USERNAME/$GIT_REPOSITORY/issues/$issue_number/labels" "$label_body" >/dev/null 2>&1

	echo "$issue_number"
}

#
# Generate label body for Github PR
#
# $1 labels - Array parsed from JSON
#
# Returns body to use in a label's POST request.
# If labels is not an array, default to []
#
get_labels_body() {
	local labels label_text label_count

	labels="$1"
	[ -n "$1" ] || labels="[]"

	label_text=""
	label_count=0
	all_labels=$(jq -c '.[]' <<< "$labels" 2>/dev/null)
	for label in $all_labels; do
		label_text="$label_text$label,"
		(( label_count += 1 ))
	done

	if [ $label_count -gt 0 ]; then
		label_text="${label_text::-1}"
	fi

	echo "{\"labels\":[$label_text]}"
}

#
# Generate URL to search for a PR
#
# $1 head - Head branch of PR
# $2 base - Base branch of PR
# $3 status - Status of PR (defaults to open)
#
# Returns GitHub URL
#
github_pr_search_url() {
	local head base status query

	head="$1"
	base="$2"
	status="$3"
	
	[ -n "$1" ] || die "Missing head"
	[ -n "$2" ] || die "Missing base"
	[ -n "$3" ] || status="open"

	query="is:$status+base:$base+head:$head"
	echo "https://github.com/$GIT_USERNAME/$GIT_REPOSITORY/pulls?q=$(url_encode $query)"
}

############################################################

# $1 string - initial text to display in editor
# $2 tmp filename - Filename to use
get_input_editor() {
	local tmp_file input tmp_filename
	
	tmp_filename="$(filename_encode "$2")"
	[ -n "$2" ] || tmp_filename="input.tmp"

	mkdir -p "$DOT_GIT_DIR/.gitflow"
	tmp_file="$DOT_GIT_DIR/.gitflow/$tmp_filename"
	echo "$1" > "$tmp_file"
	${VISUAL-nano} "$DOT_GIT_DIR/.gitflow/$tmp_filename" > $(tty)
	input=$(cat "$tmp_file")
	rm "$tmp_file"

	echo "$input"
}

# $1 string - String to encode for URL
url_encode() {
    echo "$1" | sed -e 's/%/%25/g' -e 's/ /%20/g' -e 's/!/%21/g' \
		-e 's/"/%22/g' -e "s/'/%27/g" -e 's/#/%23/g' -e 's/(/%28/g' \
		-e 's/)/%29/g' -e 's/,/%2c/g' -e 's/-/%2d/g' \
		-e 's/:/%3a/g' -e 's/;/%3b/g' -e 's/?/%3f/g' -e 's/@/%40/g' \
		-e 's/\$/%24/g' -e 's/\&/%26/g' -e 's/\*/%2a/g' -e 's/\./%2e/g' \
		-e 's/\//%2f/g' -e 's/\[/%5b/g' -e 's/\\/%5c/g' -e 's/\]/%5d/g' \
		-e 's/\^/%5e/g' -e 's/_/%5f/g' -e 's/`/%60/g' -e 's/{/%7b/g' \
		-e 's/|/%7c/g' -e 's/}/%7d/g' -e 's/~/%7e/g'

	# Ignored to leave as is
	# -e 's/+/%2b/g' 
}

# $1 string - String to encode for filename
filename_encode() {
	echo "$1" | sed -e 's/%//g' -e 's/ /-/g' -e 's/!//g' \
		-e 's/"//g' -e "s/'//g" -e 's/#//g' -e 's/(//g' \
		-e 's/)//g' -e 's/:/-/g' -e 's/;/-/g' -e 's/?//g' \
		-e 's/@/at/g' -e 's/\$//g' -e 's/\&/~/g' -e 's/\*//g' \
		-e 's/\//~/g' -e 's/\[//g' -e 's/\\/~/g' -e 's/\]//g' \
		-e 's/`//g' -e 's/{//g' -e 's/|/~/g' -e 's/}//g' \
		-e 's/=/~/g' -e 's/,//g' -e 's/</~/g' -e 's/>/~/g' -e 's/\./~/g'
}

# $1 json - JSON String to feed to JQ
# $2 key - Key to look in JSON string
json_get_key() {
	jq "$2" <<< "$1"
}

# $1 line - String line to trim quotes from
#			Will not work on multi-lined
trim_line_quotes() {
	tr -d "\"" <<< "$1"
}

# $1 string - String to convert to JSON
#
# Returns "string" (with quotes)
string_to_json() {
	jq -aRs <<< "$1"
}

#
# Trim whitespace from text
#
# $1 text - Text to trim whitespace from
#
# Returns text with whitespace trimmed.
# Removes starting and trailing whitespace + reduces repeated whitespace to ' '
# Eg: '  git config    aloha   ' --> 'git config aloha'
#
trim_whitespace() {
	echo "$(echo "$1" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' | tr -s '[[:space:]]')"
}

#
# Get JIRA URL from branch name
#
# $1 branch name - Text to trim whitespace from
#
# Returns JIRA URL.
#
get_jira_url() {
	local branch_name root_branch jira_code
	local all_steps branch_prefixes aux_branch aux_branch_prefix

	branch_name="$1"
	[ -n "$1" ] || branch_name="$NAME"

	branch_prefixes=()
	all_steps=$(jq -c '.[]' <<< "$FINISH_STEPS")
	for step in $all_steps; do
		aux_branch=$(json_get_key "$step" '."aux-branch"')
		aux_branch_prefix=$(trim_line_quotes $(json_get_key "$step" '."aux-branch-prefix"'))

		if is_true "$aux_branch" && [ "$aux_branch_prefix" ] && [ ! "$aux_branch_prefix" = "null" ]; then
			branch_prefixes+=("$aux_branch_prefix")
		fi
	done

	if ! startswith "$branch_name" "$HU_PREFIX"; then
		for prefix in "${branch_prefixes[@]}"; do
			if startswith "$branch_name" "$prefix"; then
				root_branch=$(awk -F "$prefix" '{print $2}' <<< "$branch_name")
				if startswith "$root_branch" "$HU_PREFIX"; then
					branch_name="$root_branch"
					break
				fi
			fi
		done
	fi

	[ -n "$branch_name" ] || die "Branch is not a feature branch nor an auxiliary branch"

	jira_code=$(grep -o "^$HU_PREFIX-[0-9]*" <<< "$branch_name")
	echo "https://humand.atlassian.net/browse/$jira_code"
}

#
# Read user input
#
# $1 prompt - Prompt message before input (no spaces or : will be added to it)
# $2 default - Initial value to use as input (defaults to '')
#
# Returns input text
#
read_input() {
	local prompt default value

	prompt="$1"
	default="$2"
	
	[ -n "$1" ] || die "Missing prompt message"
	[ -n "$2" ] || default=""

	read -p "$prompt" -ei "$default" value
	echo "$value"
}

#
# run_filter_hook
#
# Looks for a Git hook script called as defined by the first variable
#
#     filter-flow-command
#
# If such a hook script exists and is executable, it is called with the given
# positional arguments.
#
run_filter_hook() {
	local command scriptfile return

	command=$1
	shift
	scriptfile="${HOOKS_DIR}/filter-flow-${command}"
	if [ -x "$scriptfile" ]; then
		return=`$scriptfile "$@"`
		if [ $? -eq 127 ]; then
			echo "$return"
			exit 127
		fi
			echo $return
	else
		echo "$@"
	fi
}

#
# run_pre_hook
#
# Looks for a Git hook script called
#
#     pre-flow-<subcmd>-<subaction>
#
# If such a hook script exists and is executable, it is called with the given
# positional arguments.  If its return code non-zero, the git-flow action is
# aborted.
#
run_pre_hook() {
	local scriptfile exitcode

	scriptfile="${HOOKS_DIR}/pre-flow-${SUBCOMMAND}-${SUBACTION}"
	exitcode=0
	if [ -x "$scriptfile" ]; then
		"$scriptfile" "$@"
		exitcode=$?

		if [ $exitcode -gt 0 ]; then
			die "Hook command $scriptfile ended with exit code $exitcode."
		fi
	fi
}

#
# run_post_hook
#
# Looks for a Git hook script called
#
#     post-flow-<subcmd>-<subaction>
#
# If such a hook script exists and is executable, it is called with the given
# positional arguments.  Its return code is ignored.
#
run_post_hook() {
	local scriptfile

	scriptfile="${HOOKS_DIR}/post-flow-${SUBCOMMAND}-${SUBACTION}"
	if [ -x "$scriptfile" ]; then
		"$scriptfile" "$@"
	fi
}

flags_help() {
	eval "$( echo "$OPTIONS_SPEC" | git rev-parse --parseopt -- "-h" || echo exit $? )"
}
