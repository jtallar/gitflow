#!/usr/bin/env bash
# $Id$
# vim:et:ft=sh:sts=2:sw=2
#
# Some of the contents of this file are taken from 
#	http://github.com/petervanderdoes/gitflow
# Copyright notice below
#
# -------------------------------------------------------------------------------
# gitflow -- Utility used to automate your Git operations by implementing a custom 
# branching model.
#
# Feel free to contribute to this project at:
#    http://github.com/jtallar/gitflow
#
# Author:
# Copyright 2022 Julian Tallar. All rights reserved.
#
# Original Authors:
# Copyright 2012-2019 Peter van der Does. All rights reserved.
# Copyright 2010 Vincent Driessen. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -------------------------------------------------------------------------------
#

# Script used to run gitflow.

# enable debug mode
if [ "$DEBUG" = "yes" ]; then
	set -x
fi

# Setup the CURRENT_DIR for different operating systems.
case $(uname -s) in
Linux)
	export CURRENT_DIR=$(dirname "$(readlink -e "$0")")
	;;
FreeBSD|OpenBSD|NetBSD)
	export FLAGS_GETOPT_CMD='/usr/local/bin/getopt'
	export CURRENT_DIR=$(dirname "$(realpath "$0")")
	;;
Darwin) # MacOS
	PRG="$0"
	while [ -h "$PRG" ]; do
		link=$(readlink "$PRG")
		if expr "$link" : '/.*' > /dev/null; then
			PRG="$link"
		else
			PRG="$(dirname "$PRG")/$link"
		fi
	done
	export CURRENT_DIR=$(dirname "$PRG")
	export FLAGS_GETOPT_CMD="$(brew --prefix gnu-getopt)/bin/getopt"
	;;
*MINGW*)
	export CURRENT_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
	pwd () {
		builtin pwd -W
	}
	;;
*)
	# The sed expression here replaces all backslashes by forward slashes.
	# This helps our Windows users, while not bothering our Unix users.)
	export CURRENT_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
	;;
esac

usage() {
	echo "usage: gitflow <subcommand>"
	echo
	echo "Available subcommands are:"
	echo "feature     Manage your feature branches."
}

main() {
	if [ $# -lt 1 ]; then
		usage
		exit 1
	fi

	# Load environment variables
	. "$CURRENT_DIR/.env" 2>/dev/null

	# Check that all system requirements are OK
	. "$CURRENT_DIR/check-requirements" >/dev/null

	# Use the shFlags project to parse the command line arguments
	. "$CURRENT_DIR/shFlags"
	FLAGS_PARENT="./feature"

	# Load common functionality
	. "$CURRENT_DIR/common"

	# Save configuration filename into variable
	CONFIG_FILENAME="$CURRENT_DIR/config.json"

	# allow user to request git action logging
	DEFINE_boolean 'showcommands' false 'Show actions taken (git commands)'
	# but if the user prefers that the logging is always on,
	# use the environmental variables.
	gitflow_override_flag_boolean 'showcommands' 'showcommands'

	SUBCOMMAND="$1"; shift

	if [ ! -e "$CURRENT_DIR/cmd-$SUBCOMMAND" ]; then
		usage
		exit 1
	fi

	# Run command
	# . == source command --> Incorporate source file into current shell 
	. "$CURRENT_DIR/cmd-$SUBCOMMAND"
	FLAGS_PARENT="./gitflow $SUBCOMMAND"

	if [ -z "${SUBACTION}" ]; then
		# If the first argument is a flag, it starts with '-', we interpret this
		# argument as a flag for the default command.
		if startswith "$1" "-"; then
			SUBACTION="default"
		elif [ -z "$1" ]; then
			SUBACTION="default"
		else
			SUBACTION="$1"
			shift
			# Do not allow direct calls to subactions with an underscore.
			if $(contains "$SUBACTION" "_"); then
				warn "Unknown subcommand: '$SUBACTION'"
				usage
				exit 1
			fi
			# Replace the dash with an underscore as bash doesn't allow a dash
			# in the function name.
			SUBACTION=$(echo "$SUBACTION" |tr '-' '_')
		fi
	fi

	if ! type "cmd_$SUBACTION" >/dev/null 2>&1; then
		warn "Unknown subcommand: '$SUBACTION'"
		usage
		exit 1
	fi

	# Run the specified action
	if [ $SUBACTION != "help" ] && [ $SUBCOMMAND != "init" ]; then
		initialize
	fi
	if [ $SUBACTION != 'default' ]; then
		FLAGS_PARENT="./gitflow $SUBCOMMAND $SUBACTION"
		EXECUTED_CMD="gitflow $SUBCOMMAND ${SUBACTION}$((($#)) && printf ' %q' "$@")"
	fi

	cmd_$SUBACTION "$@" "${_short_branch_name}"
}
main "$@"
