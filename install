#!/usr/bin/env bash
# $Id$
# vim:et:ft=sh:sts=2:sw=2
#
# gitflow -- Utility used to automate your Git operations by implementing a custom 
# branching model.
#
# Feel free to contribute to this project at:
#    http://github.com/jtallar/gitflow
#
# Author:
# Copyright 2022 Julian Tallar. All rights reserved.
#
# Original Authors:
# Copyright 2012-2019 Peter van der Does. All rights reserved.
# Copyright 2010 Vincent Driessen. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -------------------------------------------------------------------------------
#

# Script used to install every required programme for using Gitflow

# Install requirements for kernel-name = Darwin (MacOS)
install_req_darwin() {
    local status_code
    # Test redirect to /dev/null
    echo "Nothing" >/dev/null; status_code="$?"
    if [ $status_code -ne 0 ]; then
        echo "Cannot access /dev/null. Please fix permissions issue by following"
        echo "https://unix.stackexchange.com/questions/146633/bash-dev-null-permission-denied"
        echo "Then, re-run this script."
        exit 1
    fi

    # Check that homebrew is installed
    which brew >/dev/null; status_code="$?"
    if [ $status_code -ne 0 ]; then
        echo "Homebrew is not installed. Please install it and re-run this script."
        exit 1
    fi

    # Check that developer tools have been installed
    xcode-select -p >/dev/null; status_code="$?"
    if [ $status_code -ne 0 ]; then
        echo "Installing developer tools..."
        xcode-select --install
        echo "Please re-run this script once installation has finished."
        exit 1
    fi

    # Upgrade bash
    if [[ "${BASH_VERSINFO[0]}" -lt 4 ]]; then
        local bash_path
        brew list --verbose bash >/dev/null 2>/dev/null; status_code="$?"
        if [ $status_code -eq 0 ]; then
            echo "Bash has already been installed with brew."
            echo "Please use that bash to run all scripts, including this one."
            exit 1
        fi
        echo "Installing bash with Brew..."
        brew install bash
        bash_path=$(which -a bash | head -n 1)
        echo "Adding installed bash to /etc/shells"
        echo "$bash_path" | sudo tee -a /etc/shells >/dev/null
    fi

    # Install jq
    jq --version | grep '\(jq-1\.\([6-9]\|[1-9][0-9]\)\)\|\(jq-[2-9]\..\)' >/dev/null; status_code="$?"
    if [ $status_code -ne 0 ]; then
        echo "Installing jq..."
        brew install jq
    fi

    # Install GNU enhanced getopt
    "$(brew --prefix gnu-getopt)/bin/getopt" -T > /dev/null; status_code="$?"
    if [ $status_code -ne 4 ]; then
        echo "Installing gnu-getopt..."
        brew install gnu-getopt
    fi

    # Add execution permission for all scripts
    echo "Adding execution permissions for gitflow script..."
    chmod +x "check-requirements" "gitflow"
}

install_requirements() {    
    # Setup the CURRENT_DIR for different operating systems.
    case $(uname -s) in
    Darwin) # MacOS
        install_req_darwin
        ;;
    *)
        echo "The installation script does not support your SO."
        echo "Please install the requirements manually."
        exit 1
        ;;
    esac

    echo
    echo "All required commands/programs have been installed!"
    return 0
}
install_requirements "$@"
